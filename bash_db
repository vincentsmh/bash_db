#!/bin/bash

# DB_DIR is the default database directory. The user can call set_db_dir to
# change the directoy
DB_DIR="${HOME}/.bash_db"
bash_db_error=""

function _b64d()
{
  echo "$@" | base64 --decode
}

function _b64e()
{
  echo "$@" | base64
}

# create_table TABLE_NAME FIELD_NAME1 [FIELD_NAME2 FIELD_NAME3 ...]
#   - Create a table in DB_DIR. Table name will be encoded by base64 format.
#
#       This create two files in DB_DIR where one is used to store data and the
#       others are used to store metadata (field names, number of rows and
#       field length)
function create_table()
{
  mkdir -p ${DB_DIR}
  local tbfile="$(_table_file $1)"

  if [ -f ${tbfile} ]; then
    bash_db_error="Table exists"
    return 1
  fi

  if ! touch "$tbfile" ; then
    bash_db_error="Cannot create table file in ${DB_DIR}"
    return 1
  fi

  shift 1
  local fields_line=""
  local fields_len_line=""
  for field in "$@"; do
    if [ "${fields_line}" != "" ]; then
      fields_line="${fields_line}\,"
      fields_len_line="${fields_len_line}\,"
    fi

    fields_line="${fields_line}${field}"
    fields_len_line="${fields_len_line}${#field}"
  done

  echo -e "${fields_line}\n${fields_len_line}\n0" > ${tbfile}.md
  return $?
}

# insert_record TABLE_NAME VALUE1 [VALUE2 VALUE3 ...]
function insert_record()
{
  if [ -z "$1" ]; then
    bash_db_error="No arguments"
    return 1
  fi

  local tbfile=$(_table_file $1)
  if [ ! -f ${tbfile} ]; then
    bash_db_error="Table ($1) doesn't exist"
    return 1
  fi

  _get_metadata "$tbfile"
  rec_num=$(( $num_of_rows + 1 ))
  local insert_line="${rec_num}"
  local num_len_line=""
  shift 1
  for field_value in $@; do
    num_len_line="${num_len_line} ${#field_value}"
    insert_line="${insert_line}\,${field_value}"
  done

  echo -e "${insert_line}" >> ${tbfile}
  _update_metadata "fl" "${num_len_line}"
  _update_metadata "n" "1"
  _save_metadata ${tbfile}
  return $?
}

# print_table TABLE_NAME
#   - Print table to console output
function print_table()
{
  _print_table_head "$1"
  read_all "$1" "print_data"

  local color=32
  local i=0
  local j=0
  local end_i=$(( ${num_of_rows} -1 ))
  for i in $(seq 0 $end_i); do
    echo -n "|"
    for j in ${!fields[@]}; do
      echo -en "\033[1;${color}m${print_data[$i,${fields[$j]}]}\033[0m"
      _print_chars " " \
        $(( ${fields_len[$j]} - ${#print_data[$i,${fields[$j]}]} ))
      echo -n "|"
    done

    if [ $color -eq 37 ]; then
      color=32
    else
      color=$(( $color + 1 ))
    fi

    echo -e
    _print_table_line
  done
}

# read_all TABLE_NAME VARIABLE
#   - Read all data to the given array. The read data will be stored as:
#     VARIABLE[0]['ID']=record1_ID
#     VARIABLE[0][field_name_1]=record1_value1
#     VARIABLE[0][field_name_2]=record1_value2
#     VARIABLE[1]['ID']=record2_ID
#     VARIABLE[1][field_name_1]=record2_value3
#     VARIABLE[1][field_name_2]=record2_value4
#     ...
function read_all()
{
  if [ -z "$1" ]; then
    bash_db_error="Need table name"
    return 1
  fi

  if [ -z "$2" ]; then
    bash_db_error="Need a variable for assignment"
    return 2
  fi

  eval unset $2
  eval declare -Ag $2
  local tb_file=$(_table_file "$1")
  local loop_idx=0
  local record_idx=0
  _get_metadata "$tb_file"
  while read record; do
    local i=1
    unset array
    _str_to_arr "array" "$record"
    eval $2[${loop_idx},"ID"]="${array[0]}"

    for field in ${fields[@]}; do
      eval $2[${loop_idx},${field}]="${array[$i]}"
      i=$(($i + 1))
    done

    loop_idx=$((${loop_idx} + 1))
  done < "$tb_file"
}

# set_db_dir PATH
function set_db_dir()
{
  DB_DIR="$1"
  mkdir -p ${DB_DIR}
}

# table_exist TABLE_NAME
function table_exist()
{
  local tbfile=$(_table_file "$1")
  if [ -f ${tbfile} ]; then
    return 0
  else
    return 1
  fi
}

# _print_chars CHAR NUMBER
function _print_chars()
{
  printf "%${2}s"|tr ' ' "${1}"
}

function _print_table_head()
{
  _get_metadata "$(_table_file $1)"
  _print_table_line

  # Print table fields
  local i=0
  echo -n "|"
  for i in ${!fields[@]}; do
    local field_max_len=${fields_len[$i]}
    local field_len=${#field}
    local start_space_len=$(( ($field_max_len - $field_len) / 2 ))
    local tail_space_len=$(( $field_max_len - $field_len - $start_space_len ))
    _print_chars " " $start_space_len
    echo -n $field
    _print_chars " " $tail_space_len
    echo -n "|"
  done

  echo -e
  _print_table_line

}

# Before calling this function, _get_metadata should be called in advance to
# get corresponding variables.
function _print_table_line()
{
  echo -n '+'
  for i in ${!fields_len[@]}; do
    _print_chars "-" ${fields_len[$i]}
    echo -n '+'
  done

  echo -e
}

# _get_metadata TABLE_FILE
#   The format of a table's metadata file is as: (separater is \,)
#   FILED_NAME1\,FIELD_NAME2\,...
#   FIELD1_LENGTH\,FIELD2_LENGTH\,...
#   NUMBER_OF_ROWS_IN_TABLE
function _get_metadata()
{
  local tb_md_file="${1}.md"
  local loop_idx=0
  IFS=$'\n' read -rd '' -a lines <<< "$(cat $tb_md_file)"

  unset fields
  _str_to_arr "fields" "${lines[0]}"

  unset fields_len
  _str_to_arr "fields_len" "${lines[1]}"

  num_of_rows="${lines[2]}"
}

# _save_metadata TABLE_NAME
function _save_metadata()
{
  local tb_md_file="${1}.md"
  local fields_line=""
  local fields_len_line=""
  for field in ${fields[@]}; do
    if [ "${fields_line}" != "" ]; then
      fields_line="${fields_line}\,"
    fi

    fields_line="${fields_line}${field}"
  done

  for field_len in ${fields_len[@]}; do
    if [ "${fields_len_line}" != "" ]; then
      fields_len_line="${fields_len_line}\,"
    fi

    fields_len_line="${fields_len_line}${field_len}"
  done

  echo -e "${fields_line}\n${fields_len_line}\n${num_of_rows}" > $tb_md_file
}

# _set_num_record TABLE_FILE UPDATED_NUMBER FIELD_LEN1 FIELD_LEN2 ...
function _set_num_record()
{
  local tbfile="$1"
  local line="$(cat $1 | sed -n 2p)"
  local idx=1
  IFS=',' read -a num_n_flen <<< "${line}"
  line="$2"
  shift 2

  for field_len in $@; do
    if [ ${field_len} -gt ${num_n_flen[$idx]} ]; then
      line="${line},${field_len}"
    else
      line="${line},${num_n_flen[$idx]}"
    fi
    idx=$((${idx} + 1))
  done

  local sed_cmd="sed -i'' -e '2s/.*/${line}/' ${tbfile}"
  eval ${sed_cmd}
  return $?
}

# _str_to_arr ARRAY_NAME STRING
function _str_to_arr()
{
  IFS='\,'
  local cmd="$1=(${2})"
  eval $cmd
  unset IFS
}

# _table_file TABLE_NAME
#   - Return table file path
function _table_file()
{
  echo "${DB_DIR}/$(_b64e $1)"
}

# _update_metadata "f"|"fl"|"n" FIELDS|FIELDS_LEN|NUM_OF_ROWS
# This function only updates the corresponding value in variables. You should
# call _save_metadata if you want to flush metadata to disk.
function _update_metadata()
{
  if [ -z "$2" ]; then
    return 1
  fi

  if [ "$1" == "n" ]; then
    num_of_rows=$(( $num_of_rows + $2 ))
  elif [ "$1" == "f" ]; then
    unset tmp_arr
    oIFS=$IFS
    IFS=' ' read -a tmp_arr <<< "$2"
    IFS=$oIFS
    if [ ${#fields[@]} -eq ${#tmp_arr[@]} ]; then
      for i in ${!fields[@]}; do
        fields[$i]=${tmp_arr[$i]}
      done
    else
      return 1
    fi
    unset tmp_arr
  elif [ "$1" == "fl" ]; then
    unset tmp_arr
    oIFS=$IFS
    IFS=' ' read -a tmp_arr <<< "$2"
    IFS=$oIFS
    if [ ${#fields_len[@]} -eq ${#tmp_arr[@]} ]; then
      for i in ${!fields_len[@]}; do
        if [ ${tmp_arr[$i]} -gt ${fields_len[$i]} ]; then
          fields_len[$i]=${tmp_arr[$i]}
        fi
      done
    else
      return 1
    fi
    unset tmp_arr
  fi

  return 0
}
