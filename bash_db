#!/bin/bash

# DB_DIR is the default database directory. The user can call set_db_dir to
# change the directoy
DB_DIR="${HOME}/.bash_db"
bash_db_error=""

function _b64d()
{
  echo "$@" | base64 --decode
}

function _b64e()
{
  echo "$@" | base64
}

# create_table TABLE_NAME FIELD_NAME1 [FIELD_NAME2 FIELD_NAME3 ...]
#   - Create a table in DB_DIR. Table and field name will be encoded as base64
#     format. The first two lines are formated as follows:
#       FIELD1,FIELD2,FIELD3_...
#       NUMBER-OF-RECORDS,FIELD1-LENGTH,FIELD2-LENGTH,...
function create_table()
{
  mkdir -p ${DB_DIR}
  local tbfile="$(_table_file $1)"

  if [ -f ${tbfile} ]; then
    bash_db_error="Table exists"
    return 1
  fi

  if ! touch ${tbfile}; then
    bash_db_error="Cannot create table file in ${DB_DIR}"
    return 1
  fi

  shift 1
  local fields_line=""
  local field_len_line="0"
  for field in "$@"; do
    if [ "${fields_line}" != "" ]; then
      fields_line="${fields_line},"
    fi

    fields_line="${fields_line}$(_b64e ${field})"
    field_len_line="${field_len_line},${#field}"
  done

  echo -e "${fields_line}\n${field_len_line}" > ${tbfile}
  return $?
}

# insert_record TABLE_NAME VALUE1 [VALUE2 VALUE3 ...]
function insert_record()
{
  if [ -z "$1" ]; then
    bash_db_error="No arguments"
    return 1
  fi

  local tbfile=$(_table_file $1)
  if [ ! -f ${tbfile} ]; then
    bash_db_error="Table ($1) doesn't exist"
    return 1
  fi

  local rec_num=$(_get_record_num ${tbfile})
  rec_num=$((${rec_num} + 1))
  local insert_line="${rec_num}"
  local num_len_line="${rec_num}"
  shift 1
  for field_value in $@; do
    num_len_line="${num_len_line} ${#field_value}"
    insert_line="${insert_line},$(_b64e ${field_value})"
  done

  echo -e "${insert_line}" >> ${tbfile}
  if [ $? -ne 0 ]; then
    return $?
  fi

  _set_num_record ${tbfile} ${num_len_line}
  return $?
}

# print_table TABLE_NAME
#   - Print table to console output
function print_table()
{
  return 0
}

# read_all TABLE_NAME VARIABLE
#   - Read all data to the given array. The read data will be stored as:
#     VARIABLE[0][field_name_1]=value_1
#     VARIABLE[0][field_name_2]=value_2
#     VARIABLE[1][field_name_1]=value_3
#     VARIABLE[1][field_name_2]=value_4
#     ...
function read_all()
{
  if [ -z "$1" ]; then
    bash_db_error="Need table name"
    return 1
  fi

  if [ -z "$2" ]; then
    bash_db_error="Need a variable for assignment"
    return 2
  fi

  eval unset $2
  eval declare -Ag $2
  local loop_idx=0
  local record_idx=0
  while read record; do
    if [ ${loop_idx} -eq 0 ]; then
      unset fields
      IFS=',' read -a fields <<< "${record}"
    elif [ ${loop_idx} -eq 1 ]; then
      unset fields_len
      IFS=',' read -a fields_len <<< "${record}"
    else
      unset array
      IFS=',' read -a array <<< "${record}"
      local th=$(echo ${array[0]})
      local i=1

      for field in ${fields[@]}; do
        local decoded_field=$(_b64d ${field})
        eval $2[${th},${decoded_field}]=$(_b64d ${array[$i]})
        i=$(($i + 1))
      done
    fi

    loop_idx=$((${loop_idx} + 1))
  done < $(_table_file $1)
}

# set_db_dir PATH
function set_db_dir()
{
  DB_DIR="$1"
  mkdir -p ${DB_DIR}
}

# table_exist TABLE_NAME
function table_exist()
{
  local tbfile=$(_table_file "$1")
  if [ -f ${tbfile} ]; then
    return 0
  else
    return 1
  fi
}

# _get_record_num TABLE_FILE
function _get_record_num()
{
  cat $1 | sed -n 2p | awk -F "," {'print $1'}
}

# _get_metadata TABLE_NAME
function _get_metadata()
{
  local lines="$(head -n 2 ${DB_DIR})"
  local loop_idx=0

  for record in ${lines}; do
    if [ ${loop_idx} -eq 0 ]; then
      unset fields
      IFS='_' read -a fields <<< "${record}"
    elif [ ${loop_idx} -eq 1 ]; then
      unset fields_len
      IFS='_' read -a fields_len <<< "${record}"
    fi
    loop_idx=$((${loop_idx} + 1))
  done
}

# _set_num_record TABLE_FILE UPDATED_NUMBER FIELD_LEN1 FIELD_LEN2 ...
function _set_num_record()
{
  local tbfile="$1"
  local line="$(cat $1 | sed -n 2p)"
  local idx=1
  IFS=',' read -a num_n_flen <<< "${line}"
  line="$2"
  shift 2

  for field_len in $@; do
    if [ ${field_len} -gt ${num_n_flen[$idx]} ]; then
      line="${line},${field_len}"
    else
      line="${line},${num_n_flen[$idx]}"
    fi
    idx=$((${idx} + 1))
  done

  local sed_cmd="sed -i'' -e '2s/.*/${line}/' ${tbfile}"
  eval ${sed_cmd}
  return $?
}

# _table_file TABLE_NAME
#   - Return table file path
function _table_file()
{
  echo "${DB_DIR}/$(_b64e $1)"
}
